#N canvas 290 86 800 672 12;
#N canvas 23 198 754 435 paint 1;
#X restore 69 177 pd paint;
#X obj 685 110 s pd-paint;
#X msg 685 84 clear;
#X obj 614 167 pointer;
#X msg 572 174 100;
#X msg 572 49 bang;
#X obj 572 78 t b b b b;
#X obj 572 25 loadbang;
#X msg 581 135 traverse pd-paint \, bang;
#X text 650 52 Initialization;
#X obj 575 199 append grob-11 color;
#X text 19 226 Move them around \, watch the red coordinates change
\, change the colors as well.;
#X text 19 283 If you right-click one of the grob-11's and select properties
\, you can see the textual representation of the data.;
#X text 18 391 It also is possible to read and write all the data in
one painting area to disk \, just like textfile \, qlist or array do.
;
#X text 18 457 This works similar to the "clear" message from the beginning
of this tutorial:;
#X obj 41 612 s pd-paint;
#X msg 91 518 write grob-11.txt;
#X msg 90 579 read grob-11.txt;
#X msg 91 550 clear;
#X text 268 514 Save everything to disk.;
#X text 268 581 Restore everything. Thank god \, we made a backup...
;
#X text 269 547 Oops \, now it's all gone.;
#X text 41 16 Editing data;
#X text 18 53 You can edit the data in the painting area directly as
well. We've already seen how to move data around in edit mode \, but
you can also do the usual cut \, copy \, paste operations and of course
the highly useful duplicate (Ctrl-d). Create some more of our grob-11
objects in the paint subpatch:;
#N canvas 378 384 616 289 grob 0;
#X obj 84 53 drawnumber color;
#X obj 78 99 drawpolygon color 20 0 30 100 30;
#X obj 90 239 drawnumber y 105 20 900 y=;
#X obj 88 215 drawnumber x 105 0 900 x=;
#X text 39 190 There also is a red coordinate display now!!;
#X obj 79 18 struct grob-11 float x float y float color;
#X restore 192 179 pd grob;
#X connect 2 0 1 0;
#X connect 3 0 10 1;
#X connect 4 0 10 0;
#X connect 5 0 6 0;
#X connect 6 0 4 0;
#X connect 6 2 8 0;
#X connect 6 3 2 0;
#X connect 7 0 5 0;
#X connect 8 0 3 0;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 18 0 15 0;
