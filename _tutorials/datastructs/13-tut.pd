#N struct grob-13 float x float y array numbers num;
#N struct num float y;
#N canvas 333 165 875 677 12;
#N canvas 23 198 377 503 paint 1;
#X scalar grob-13 100 120 \; 19 \; 91 \; 21 \; -17 \; -15 \; -15 \;
-7 \; 7 \; 2 \; \;;
#X restore 47 411 pd paint;
#X text 41 16 Arrays;
#N canvas 181 126 894 509 init 0;
#X obj 273 145 s pd-paint;
#X msg 273 119 clear;
#X obj 202 202 pointer;
#X msg 106 191 100;
#X msg 166 62 bang;
#X obj 170 20 loadbang;
#X msg 169 170 traverse pd-paint \, bang;
#X text 216 71 Initialization;
#X msg 145 193 120;
#X obj 156 123 t b b b;
#X msg 113 75 bang;
#X obj 165 93 t b b;
#X text 46 58 add another;
#X obj 128 269 append grob-13 x y;
#X obj 331 41 inlet;
#X obj 88 29 inlet;
#X connect 1 0 0 0;
#X connect 2 0 13 2;
#X connect 3 0 13 0;
#X connect 4 0 11 0;
#X connect 6 0 2 0;
#X connect 8 0 13 1;
#X connect 9 0 3 0;
#X connect 9 1 8 0;
#X connect 9 2 6 0;
#X connect 10 0 9 0;
#X connect 11 0 9 0;
#X connect 11 1 1 0;
#X connect 14 0 4 0;
#X connect 15 0 10 0;
#X restore 642 58 pd init;
#X text 28 43 Now we will leave the world of simple float fields and
check out "arrays". As mentioned at the beginning \, the standard pd
table/array also is a kind of data structures array containing only
floats.;
#X text 34 133 Lets try to mimick the "table" array with a data structures
array.;
#N canvas 445 540 648 345 grob-13 0;
#X obj 65 100 struct grob-13 float x float y array numbers num;
#X text 42 137 Arrays are painted using "plot" drawing instructions:
;
#X text 44 21 This declares an array named "numbers" whose elements
are described by the template "num". Note that array declarations take
three arguments: the word "array" \, the name of the array and the
name of the elements.;
#X obj 46 264 filledcurve 9 9 1 0 -5 0 5 10 5 10 -5;
#X obj 46 317 drawpolygon 9 1 0 0 150 0;
#X obj 57 166 plot numbers 90 5 15 0 15;
#X obj 46 288 filledcurve 9 9 1 150 -5 150 5 160 5 160 -5;
#X text 46 233 Blue dots and a line used here just as a handle:;
#X restore 43 311 pd grob-13;
#X text 36 176 First we define a structure which only holds a float
and call it "num":;
#N canvas 478 447 581 359 num 0;
#X obj 193 68 struct num float y;
#X obj 91 184 filledpolygon 900 900 1 0 -5 10 -5 10 5 0 5;
#X text 80 32 The float value can only be moved on the y-axis;
#X text 112 154 A red box visualizes the float value:;
#X restore 51 225 pd num;
#X text 33 254 In our "grob-13" struct \, we now add an array called
"numbers" containing the "num" elements \, that we just defined. Arrays
are painted using "plot".;
#X msg 255 544 traverse pd-paint \, next;
#X obj 255 573 pointer;
#X obj 53 601 setsize grob-13 numbers;
#X obj 588 603 pointer;
#X msg 588 574 traverse pd-paint \, bang;
#X obj 530 635 append num y;
#X msg 529 603 100;
#X obj 531 576 t b b;
#X msg 530 554 bang;
#X text 527 519 A single "num" object for reference;
#X msg 95 557 1;
#X msg 192 540 next;
#X msg 53 557 9;
#X obj 711 29 bng 15 250 50 0 empty empty clear_and_add_one 0 -6 0
8 -262144 -1 -1;
#X obj 615 26 bng 15 250 50 0 empty empty add_another 0 -6 0 8 -262144
-1 -1;
#X text 31 346 To create a "grob-13" instance in our usual "pd paint"
area \, we use append as usual. This was already done inside the "pd
init" subpatch on load.;
#X text 30 464 To change the length of the array \, use "setsize" "setsize"
works similar to "set" for scalars \, that is \, it needs a pointer:
;
#X connect 9 0 10 0;
#X connect 10 0 11 1;
#X connect 12 0 14 1;
#X connect 13 0 12 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 16 1 13 0;
#X connect 17 0 16 0;
#X connect 19 0 11 0;
#X connect 20 0 10 0;
#X connect 21 0 11 0;
#X connect 22 0 2 1;
#X connect 23 0 2 0;
