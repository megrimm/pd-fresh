#N canvas 282 95 1019 544 12;
#N canvas 452 26 864 538 arrays 0;
#X text 29 24 The expr family of objects can read values from array
and also write to them. The syntax is arrayname[index].;
#N canvas 0 50 450 300 (subpatch) 0;
#X array array1 10 float 0;
#X coords 0 10 9 0 220 130 1 0 0;
#X restore 599 144 graph;
#X floatatom 239 344 0 0 9 0 - - -;
#X floatatom 239 401 0 0 0 0 - - -;
#X obj 239 373 expr $s2[$f1];
#X msg 340 345 symbol array1;
#X obj 594 40 loadbang;
#X floatatom 139 128 5 0 9 0 - - -, f 5;
#X floatatom 139 212 5 0 0 0 - - -, f 5;
#X obj 139 173 expr array1[$f1];
#X msg 594 72 \; array1 0 1 4 2 8 5 6 1 4 2 8;
#X text 32 78 For instance:;
#X text 195 120 input is the index to read from array, f 18;
#X text 284 166 expr used to read values from array, f 17;
#X obj 340 316 loadbang;
#X text 34 266 A symbol inlet - defined as $s# (# being the inlet number)
- is used to receive array names.;
#X text 154 475 The '=' syntax allows you to set values to an array
index:;
#X floatatom 643 443 0 0 100 0 - - -;
#X obj 643 324 vsl 20 100 0 10 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X obj 643 474 expr array1[1] = $f1;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X connect 5 0 4 1;
#X connect 6 0 10 0;
#X connect 7 0 9 0;
#X connect 9 0 8 0;
#X connect 14 0 5 0;
#X connect 17 0 19 0;
#X connect 18 0 17 0;
#X restore 824 362 pd arrays;
#N canvas 212 108 1052 507 dealing 0;
#X obj 684 139 expr $s2[$f1];
#X obj 785 108 symbol \$0-x;
#X floatatom 684 113 5 0 99 0 - - -, f 5;
#X floatatom 684 167 5 0 0 0 - - -, f 5;
#X obj 785 85 loadbang;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-x 100 float 1;
#A 0 -0.720016 -0.706683 -0.693349 -0.680016 -0.666682 -0.653348 -0.640015
-0.625014 -0.610014 -0.595014 -0.580013 -0.565013 -0.550013 -0.535012
-0.520012 -0.505012 -0.490011 -0.475011 -0.460011 -0.44501 -0.43001
-0.415009 -0.400009 -0.385009 -0.370008 -0.355008 -0.340008 -0.325007
-0.310007 -0.295007 -0.280006 -0.264006 -0.248006 -0.232005 -0.216005
-0.200005 -0.184004 -0.168004 -0.152003 -0.136003 -0.120003 -0.106669
-0.0933355 -0.0800018 -0.0666682 -0.0533346 -0.0400009 -0.0266673 -0.0133336
-3.10441e-10 0.0133336 0.0266673 0.0400009 0.0533346 0.0666682 0.0800018
0.0933355 0.106669 0.120003 0.133336 0.14667 0.160004 0.173337 0.186671
0.200005 0.213338 0.226672 0.240005 0.253339 0.266673 0.280006 0.29715
0.314293 0.331436 0.348579 0.365723 0.382866 0.400009 0.413343 0.426676
0.44001 0.453344 0.466677 0.480011 0.500011 0.520012 0.540012 0.560013
0.570013 0.580013 0.590014 0.600014 0.620014 0.640015 0.660015 0.680016
0.680016 0.720016 0.720016 0.720016;
#X coords 0 1 99 -1 200 150 1 0 0;
#X restore 224 215 graph;
#X text 21 19 '\$0' - the patch ID number \, used to force locality
in Pd - maybe used in expr to define array names or variables., f
60;
#X text 22 59 But it is important to note that the expr family of objects
adopt C-style expression syntax \, where variables cannot start with
a number \, so '\$0x' is not a legal character as Pd sees it as starting
with a number.;
#X text 22 138 Also \, the '-' character is used as the subtraction
operator \, so '\$0-x' is interpreted as "Id number" minus 'x'.;
#X text 209 399 same as "\$0 - x" \, so not it's not a symbol character.
, f 28;
#X obj 69 418 expr \$0-x[$f1];
#X text 219 436 (thus \, not a table name);
#X floatatom 69 384 5 0 99 0 - - -, f 5;
#X floatatom 69 454 5 0 0 0 - - -, f 5;
#X obj 656 414 value x\$0;
#X obj 698 382 value y_\$0;
#X obj 849 362 expr x\$0 \; y_\$0;
#X msg 656 384 1.3;
#X msg 698 352 4.7;
#X obj 656 312 loadbang;
#X obj 849 331 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 918 411 5 0 0 0 - - -, f 5;
#X floatatom 849 411 5 0 0 0 - - -, f 5;
#X text 561 41 A solution is to send the table name as a symbol:;
#X text 572 232 But for variables \, the correct practice is to have
'\$0' after a symbol character. Such as:;
#X connect 0 0 3 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 4 0 1 0;
#X connect 10 0 13 0;
#X connect 12 0 10 0;
#X connect 16 0 22 0;
#X connect 16 1 21 0;
#X connect 17 0 14 0;
#X connect 18 0 15 0;
#X connect 19 0 17 0;
#X connect 19 0 18 0;
#X connect 20 0 16 0;
#X restore 754 393 pd dealing with \$0;
#N canvas 332 204 1029 393 value 0;
#X floatatom 643 275 5 0 0 0 - - -, f 5;
#X obj 643 201 until;
#X msg 784 202 0;
#X obj 784 238 v i;
#X obj 643 239 expr i = i + 1;
#X msg 643 131 10;
#X obj 643 305 print;
#X obj 281 68 loadbang;
#X obj 241 181 value a;
#X obj 281 154 value b;
#X obj 324 128 value c;
#X text 102 112 loading values into [value] objects =====>, f 14;
#X obj 174 308 expr (a + b) / c;
#X obj 174 278 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 174 342 0 0 0 0 - - -;
#X msg 241 102 5.2;
#X msg 281 102 3.3;
#X msg 324 102 2.1;
#X text 515 60 It is also possible to assign values to variables inside
the expr family of objects with the "=" syntax.;
#X obj 643 162 trigger float bang;
#X text 28 20 The expr family of objects can access variables set into
[value] objects.;
#X text 30 232 All tha is needes is to call the variable name into
the expression.;
#X connect 0 0 6 0;
#X connect 1 0 4 0;
#X connect 2 0 3 0;
#X connect 4 0 0 0;
#X connect 5 0 19 0;
#X connect 7 0 16 0;
#X connect 7 0 17 0;
#X connect 7 0 15 0;
#X connect 12 0 14 0;
#X connect 13 0 12 0;
#X connect 15 0 8 0;
#X connect 16 0 9 0;
#X connect 17 0 10 0;
#X connect 19 0 1 0;
#X connect 19 1 2 0;
#X restore 832 329 pd value;
#N canvas 750 132 553 404 all 0;
#N canvas 801 64 374 326 arithmetic 0;
#X obj 57 90 expr $f1 + 4;
#X floatatom 57 63 5 0 0 0 - - -, f 5;
#X floatatom 57 118 5 0 0 0 - - -, f 5;
#X floatatom 208 63 5 0 0 0 - - -, f 5;
#X floatatom 208 118 5 0 0 0 - - -, f 5;
#X obj 208 90 expr $f1 * 4;
#X floatatom 57 197 5 0 0 0 - - -, f 5;
#X floatatom 57 252 5 0 0 0 - - -, f 5;
#X floatatom 208 197 5 0 0 0 - - -, f 5;
#X floatatom 208 252 5 0 0 0 - - -, f 5;
#X obj 57 224 expr $f1 - 1;
#X obj 208 224 expr $f1 / 10;
#X text 57 34 Add;
#X text 206 34 Multiply;
#X text 206 174 Divide;
#X text 56 174 Subtract;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 3 0 5 0;
#X connect 5 0 4 0;
#X connect 6 0 10 0;
#X connect 8 0 11 0;
#X connect 10 0 7 0;
#X connect 11 0 9 0;
#X restore 165 103 pd arithmetic operators;
#N canvas 712 191 621 391 bitwise 0;
#X floatatom 67 218 5 0 0 0 - - -, f 5;
#X obj 67 188 expr ~ $f1;
#X text 117 155 one's complement;
#X text 169 187 (bitwise not);
#X floatatom 64 103 5 0 0 0 - - -, f 5;
#X obj 64 73 expr $f1 & 3;
#X floatatom 64 43 5 0 0 0 - - -, f 5;
#X text 124 41 Bitwise And;
#X floatatom 337 98 5 0 0 0 - - -, f 5;
#X floatatom 337 38 5 0 0 0 - - -, f 5;
#X obj 337 68 expr $f1 << 1;
#X floatatom 339 207 5 0 0 0 - - -, f 5;
#X floatatom 339 147 5 0 0 0 - - -, f 5;
#X text 394 147 Bitshift Right;
#X text 403 36 Bitshift Left;
#X obj 339 177 expr $f1 >> 2;
#X floatatom 343 320 5 0 0 0 - - -, f 5;
#X floatatom 343 260 5 0 0 0 - - -, f 5;
#X obj 343 290 expr $f1 ^ 1;
#X text 399 260 Bitwise Exclusive Or;
#X floatatom 72 324 5 0 0 0 - - -, f 5;
#X floatatom 72 264 5 0 0 0 - - -, f 5;
#X text 134 256 Bitwise Or;
#X obj 72 294 expr $f1 | 3;
#X floatatom 67 158 5 0 0 0 - - -, f 5;
#X connect 1 0 0 0;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 9 0 10 0;
#X connect 10 0 8 0;
#X connect 12 0 15 0;
#X connect 15 0 11 0;
#X connect 17 0 18 0;
#X connect 18 0 16 0;
#X connect 21 0 23 0;
#X connect 23 0 20 0;
#X connect 24 0 1 0;
#X restore 165 134 pd bitwise operators;
#N canvas 659 131 689 317 comparison 0;
#X floatatom 48 55 5 0 0 0 - - -, f 5;
#X floatatom 48 110 5 0 0 0 - - -, f 5;
#X floatatom 199 54 5 0 0 0 - - -, f 5;
#X floatatom 199 109 5 0 0 0 - - -, f 5;
#X floatatom 55 194 5 0 0 0 - - -, f 5;
#X floatatom 55 249 5 0 0 0 - - -, f 5;
#X floatatom 351 58 5 0 0 0 - - -, f 5;
#X floatatom 351 113 5 0 0 0 - - -, f 5;
#X obj 48 82 expr $f1 > 4;
#X obj 199 81 expr $f1 < 4;
#X obj 55 221 expr $f1 >= 1;
#X text 207 26 Less than;
#X text 48 26 Greater than;
#X text 50 148 Greater than;
#X text 57 166 or equal;
#X floatatom 203 195 5 0 0 0 - - -, f 5;
#X floatatom 203 250 5 0 0 0 - - -, f 5;
#X text 206 167 or equal;
#X text 202 149 Less than;
#X obj 203 222 expr $f1 <= 10;
#X text 356 25 Equal;
#X obj 351 85 expr $f1 == 2;
#X floatatom 497 58 5 0 0 0 - - -, f 5;
#X floatatom 497 113 5 0 0 0 - - -, f 5;
#X text 502 25 Not Equal;
#X obj 497 85 expr $f1 != 2;
#X floatatom 360 191 5 0 0 0 - - -, f 5;
#X floatatom 360 246 5 0 0 0 - - -, f 5;
#X text 365 158 Logical And;
#X obj 360 218 expr $f1 && 1;
#X floatatom 498 191 5 0 0 0 - - -, f 5;
#X floatatom 498 246 5 0 0 0 - - -, f 5;
#X text 503 158 Logical Or;
#X obj 498 218 expr $f1 || 0;
#X connect 0 0 8 0;
#X connect 2 0 9 0;
#X connect 4 0 10 0;
#X connect 6 0 21 0;
#X connect 8 0 1 0;
#X connect 9 0 3 0;
#X connect 10 0 5 0;
#X connect 15 0 19 0;
#X connect 19 0 16 0;
#X connect 21 0 7 0;
#X connect 22 0 25 0;
#X connect 25 0 23 0;
#X connect 26 0 29 0;
#X connect 29 0 27 0;
#X connect 30 0 33 0;
#X connect 33 0 31 0;
#X restore 165 165 pd comparison operators;
#N canvas 576 55 618 571 power 0;
#X floatatom 74 60 5 0 0 0 - - -, f 5;
#X floatatom 74 119 5 0 0 0 - - -, f 5;
#X floatatom 74 151 5 0 0 0 - - -, f 5;
#X floatatom 74 208 5 0 0 0 - - -, f 5;
#X floatatom 71 337 5 0 0 0 - - -, f 5;
#X floatatom 71 409 0 0 0 0 - - -;
#X floatatom 338 103 5 0 0 0 - - -, f 5;
#X floatatom 439 101 5 0 0 0 - - -, f 5;
#X floatatom 338 31 5 0 0 0 - - -, f 5;
#X floatatom 340 414 5 0 0 0 - - -, f 5;
#X floatatom 340 484 0 0 0 0 - - -;
#X floatatom 74 513 5 0 0 0 - - -, f 5;
#X obj 74 88 expr pow($f1 \, 2);
#X text 42 88 pow;
#X text 33 178 sqrt;
#X text 41 364 exp;
#X floatatom 338 276 5 0 0 0 - - -, f 5;
#X floatatom 338 224 5 0 0 0 - - -, f 5;
#X obj 338 56 expr ln($f1) \; log($f1);
#X obj 74 484 expr fact($f1);
#X msg 74 451 3;
#X floatatom 449 482 0 0 0 0 - - -;
#X text 304 442 erf;
#X text 296 458 erfc;
#X floatatom 180 408 0 0 0 0 - - -;
#X floatatom 339 187 5 0 0 0 - - -, f 5;
#X floatatom 339 135 5 0 0 0 - - -, f 5;
#X obj 339 160 expr log1p($f1);
#X obj 338 249 expr log10($f1);
#X floatatom 341 375 5 0 0 0 - - -, f 5;
#X floatatom 341 323 5 0 0 0 - - -, f 5;
#X obj 341 348 expr ldexp($f1 \, 3);
#X text 310 57 ln;
#X text 302 70 log;
#X text 284 250 log10;
#X text 287 159 log1p;
#X text 290 348 ldexp;
#X text 385 29 natural log;
#X text 385 221 log base 10;
#X text 36 482 fact;
#X obj 71 365 expr exp($f1) \; expm1($f1);
#X text 24 382 expm1;
#X floatatom 73 239 5 0 0 0 - - -, f 5;
#X floatatom 73 296 5 0 0 0 - - -, f 5;
#X text 33 268 cbrt;
#X obj 74 179 expr sqrt($f1);
#X obj 73 267 expr cbrt($f1);
#X text 110 451 factorial;
#X text 72 33 raise to the power of;
#X text 141 148 square root;
#X text 150 239 cube root;
#X text 133 324 exp: e raised to the power of, f 15;
#X text 197 382 exp - 1;
#X text 397 133 natural log of input + 1;
#X text 405 309 multiply by integral power of 2, f 20;
#X text 267 507 error function;
#X text 448 505 complementary error function, f 14;
#X obj 340 442 expr erf($f1) \; erfc($f1);
#X connect 0 0 12 0;
#X connect 2 0 45 0;
#X connect 4 0 40 0;
#X connect 8 0 18 0;
#X connect 9 0 57 0;
#X connect 12 0 1 0;
#X connect 17 0 28 0;
#X connect 18 0 6 0;
#X connect 18 1 7 0;
#X connect 19 0 11 0;
#X connect 20 0 19 0;
#X connect 26 0 27 0;
#X connect 27 0 25 0;
#X connect 28 0 16 0;
#X connect 30 0 31 0;
#X connect 31 0 29 0;
#X connect 40 0 5 0;
#X connect 40 1 24 0;
#X connect 42 0 46 0;
#X connect 45 0 3 0;
#X connect 46 0 43 0;
#X connect 57 0 10 0;
#X connect 57 1 21 0;
#X restore 165 268 pd power functions;
#N canvas 411 157 793 420 trigonometric 0;
#X floatatom 73 34 5 0 0 0 - - -, f 5;
#X floatatom 73 93 5 0 0 0 - - -, f 5;
#X floatatom 73 125 5 0 0 0 - - -, f 5;
#X floatatom 73 182 5 0 0 0 - - -, f 5;
#X floatatom 72 213 5 0 0 0 - - -, f 5;
#X floatatom 72 270 5 0 0 0 - - -, f 5;
#X obj 73 62 expr sin($f1);
#X text 38 62 sin;
#X text 35 152 cos;
#X obj 73 153 expr cos($f1);
#X text 35 242 tan;
#X obj 72 241 expr tan($f1);
#X floatatom 273 34 5 0 0 0 - - -, f 5;
#X floatatom 273 93 5 0 0 0 - - -, f 5;
#X floatatom 273 125 5 0 0 0 - - -, f 5;
#X floatatom 273 182 5 0 0 0 - - -, f 5;
#X text 231 62 asin;
#X text 228 152 acos;
#X obj 273 62 expr asin($f1);
#X obj 273 153 expr acos($f1);
#X text 122 32 sine;
#X text 124 125 cosine;
#X text 123 213 tangent;
#X floatatom 274 209 5 0 0 0 - - -, f 5;
#X floatatom 274 266 5 0 0 0 - - -, f 5;
#X obj 274 237 expr tan($f1);
#X text 230 238 atan;
#X text 340 32 arc sine;
#X text 335 125 arc cosine;
#X text 335 209 arc tangent;
#X floatatom 506 33 5 0 0 0 - - -, f 5;
#X floatatom 506 92 5 0 0 0 - - -, f 5;
#X floatatom 506 124 5 0 0 0 - - -, f 5;
#X floatatom 506 181 5 0 0 0 - - -, f 5;
#X floatatom 507 208 5 0 0 0 - - -, f 5;
#X floatatom 507 265 5 0 0 0 - - -, f 5;
#X text 454 61 asinh;
#X text 451 151 acosh;
#X text 453 237 atanh;
#X text 640 46 inverse hyperbolic sine, f 10;
#X obj 506 61 expr asinh($f1);
#X obj 506 152 expr acosh($f1);
#X obj 507 236 expr atanh($f1);
#X text 641 137 inverse hyperbolic cosine, f 10;
#X text 642 225 inverse hyperbolic tangent, f 10;
#X floatatom 229 319 5 0 0 0 - - -, f 5;
#X floatatom 229 376 5 0 0 0 - - -, f 5;
#X text 178 348 atan2;
#X obj 229 347 expr atan2($f1 \, $f2);
#X floatatom 386 319 5 0 0 0 - - -, f 5;
#X text 401 346 arc tangent of 2 variables;
#X connect 0 0 6 0;
#X connect 2 0 9 0;
#X connect 4 0 11 0;
#X connect 6 0 1 0;
#X connect 9 0 3 0;
#X connect 11 0 5 0;
#X connect 12 0 18 0;
#X connect 14 0 19 0;
#X connect 18 0 13 0;
#X connect 19 0 15 0;
#X connect 23 0 25 0;
#X connect 25 0 24 0;
#X connect 30 0 40 0;
#X connect 32 0 41 0;
#X connect 34 0 42 0;
#X connect 40 0 31 0;
#X connect 41 0 33 0;
#X connect 42 0 35 0;
#X connect 45 0 48 0;
#X connect 48 0 46 0;
#X connect 49 0 48 1;
#X restore 165 301 pd trigonometric functions;
#N canvas 628 105 616 442 table 0;
#X obj 83 56 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 83 146 0 0 0 0 - - -;
#X floatatom 177 147 0 0 0 0 - - -;
#X floatatom 272 147 0 0 0 0 - - -;
#X text 46 84 Sum;
#X text 46 97 sum;
#X text 40 112 size;
#N canvas 0 50 450 300 (subpatch) 0;
#X array table 100 float 1;
#A 0 -0.714272 -0.678559 -0.642845 -0.607131 -0.571417 -0.52856 -0.485703
-0.428561 -0.371419 -0.314277 -0.257134 -0.228563 -0.114279 -0.0857077
-0.0571365 -0.0285654 5.72205e-06 0.0285769 0.0428624 0.057148 0.0857191
0.11429 0.142861 0.171432 0.171432 0.200004 0.200004 0.200004 0.228575
0.228575 0.228575 0.228575 0.228575 0.228575 0.228575 0.200004 0.0857191
5.72205e-06 -0.228563 -0.885699 -0.885699 -0.885699 -0.885699 -0.857128
-0.842843 -0.828557 -0.771415 -0.73332 -0.695225 -0.65713 -0.599988
-0.542846 -0.485703 -0.419038 -0.352372 -0.257134 -0.171421 -0.114279
5.72205e-06 0.0285769 0.142861 0.200004 0.228575 0.271431 0.314288
0.342859 0.400002 0.428573 0.485715 0.485715 0.514286 0.514286 0.514286
0.514286 0.514286 0.485715 0.457144 0.428573 0.428573 0.400002 0.342859
0.328574 0.314288 0.285717 0.285717 0.257146 0.257146 0.257146 0.257146
0.257146 0.257146 0.257146 0.285717 0.314288 0.342859 0.342859 0.342859
0.342859 0.342859 0.342859;
#X coords 0 1 99 -1 200 140 1 0 0;
#X restore 360 57 graph;
#X text 50 170 sum a range of indexes, f 11;
#X text 173 171 sum all indexes, f 7;
#X text 266 173 array size, f 5;
#X text 72 254 Note that the syntax requires that the table name is
inside quotes.;
#X obj 241 344 expr size("$s1") \;;
#X obj 83 85 expr Sum("table" \, 3 \, 9) \; sum("table") \; size("table")
;
#X msg 241 314 symbol table;
#X floatatom 241 377 5 0 0 0 - - -, f 5;
#X connect 0 0 13 0;
#X connect 12 0 15 0;
#X connect 13 0 1 0;
#X connect 13 1 2 0;
#X connect 13 2 3 0;
#X connect 14 0 12 0;
#X restore 165 235 pd table functions;
#N canvas 299 121 1056 535 other 0;
#X floatatom 93 26 5 0 0 0 - - -, f 5;
#X floatatom 93 99 5 0 0 0 - - -, f 5;
#X text 216 54 convert to int;
#X floatatom 88 147 5 0 0 0 - - -, f 5;
#X floatatom 88 237 5 0 0 0 - - -, f 5;
#X text 58 53 int;
#X text 46 178 rint;
#X text 139 139 round a float to a nearby integer, f 17;
#X text 6 211 nearbyint;
#X text 141 291 convert to float;
#X floatatom 89 367 5 0 0 0 - - -, f 5;
#X floatatom 254 365 5 0 0 0 - - -, f 5;
#X floatatom 89 295 5 0 0 0 - - -, f 5;
#X text 37 325 float;
#X floatatom 438 32 5 0 0 0 - - -, f 5;
#X floatatom 438 108 5 0 0 0 - - -, f 5;
#X floatatom 572 105 5 0 0 0 - - -, f 5;
#X text 403 77 min;
#X text 403 60 max;
#X obj 438 60 expr max($f1 \, 0) \; min($f1 \, 0);
#X text 490 30 maximum / minimum;
#X obj 437 175 expr copysign($f1 \, $f2);
#X floatatom 618 152 5 0 0 0 - - -, f 5;
#X floatatom 437 150 5 0 0 0 - - -, f 5;
#X text 360 176 copysign;
#X floatatom 437 204 5 0 0 0 - - -, f 5;
#X text 483 203 copy sign of a number;
#X obj 89 320 expr float($i1) / 10 \; float(5) / 10 \;;
#X floatatom 762 164 5 0 0 0 - - -, f 5;
#X floatatom 887 163 5 0 0 0 - - -, f 5;
#X obj 762 119 expr isinf($f1) \; finite($f1);
#X text 713 118 isinf;
#X text 705 136 finite;
#X text 907 117 "is infinite" and "is finite", f 15;
#X floatatom 762 87 5 0 0 0 - - -, f 5;
#X msg 802 29 2;
#X obj 762 54 pow 1e+10;
#X msg 762 27 1;
#X floatatom 770 347 5 0 0 0 - - -, f 5;
#X floatatom 770 285 5 0 0 0 - - -, f 5;
#X obj 770 315 expr isnan($f1);
#X text 718 316 isnan;
#X text 912 295 "is Nan" (not a number), f 9;
#X text 389 297 modf;
#X floatatom 430 255 5 0 0 0 - - -, f 5;
#X floatatom 430 324 5 0 0 0 - - -, f 5;
#X text 381 281 imodf;
#X obj 93 54 expr int($f1) \; trunc($f1);
#X floatatom 202 99 5 0 0 0 - - -, f 5;
#X text 48 66 trunc;
#X text 216 69 truncate a float;
#X floatatom 146 237 5 0 0 0 - - -, f 5;
#X text 38 195 round;
#X floatatom 205 237 5 0 0 0 - - -, f 5;
#X obj 88 178 expr rint($f1) \; round($f1) \; nearbyint($f1);
#X text 499 402 float remainder functions, f 15;
#X floatatom 427 426 5 0 0 0 - - -, f 5;
#X floatatom 427 497 5 0 0 0 - - -, f 5;
#X floatatom 584 495 5 0 0 0 - - -, f 5;
#X obj 427 451 expr fmod($f1 \, 3.2) \; remainder($f1 \, 3.2);
#X msg 427 402 -5.3;
#X floatatom 91 421 5 0 0 0 - - -, f 5;
#X floatatom 91 494 5 0 0 0 - - -, f 5;
#X floatatom 208 494 5 0 0 0 - - -, f 5;
#X text 143 419 ceil / floor;
#X text 47 449 ceil;
#X text 39 467 floor;
#X obj 91 449 expr ceil($f1) \; floor($f1);
#X obj 430 281 expr imodf($f1) \; modf($f1);
#X text 414 345 get signed integer, f 10;
#X text 540 347 get signed fractional, f 11;
#X floatatom 555 324 5 0 0 0 - - -, f 5;
#X floatatom 801 400 5 0 0 0 - - -, f 5;
#X obj 801 437 expr abs($f1);
#X text 769 437 abs;
#X floatatom 801 474 5 0 0 0 - - -, f 5;
#X text 849 399 absolute value;
#X text 386 454 fmod;
#X text 346 468 remainder;
#X obj 770 225 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 770 251 expr acosh(0);
#X connect 0 0 47 0;
#X connect 3 0 54 0;
#X connect 12 0 27 0;
#X connect 14 0 19 0;
#X connect 19 0 15 0;
#X connect 19 1 16 0;
#X connect 21 0 25 0;
#X connect 22 0 21 1;
#X connect 23 0 21 0;
#X connect 27 0 10 0;
#X connect 27 1 11 0;
#X connect 30 0 28 0;
#X connect 30 1 29 0;
#X connect 34 0 30 0;
#X connect 35 0 36 0;
#X connect 36 0 34 0;
#X connect 37 0 36 0;
#X connect 39 0 40 0;
#X connect 40 0 38 0;
#X connect 44 0 68 0;
#X connect 47 0 1 0;
#X connect 47 1 48 0;
#X connect 54 0 4 0;
#X connect 54 1 51 0;
#X connect 54 2 53 0;
#X connect 56 0 59 0;
#X connect 59 0 57 0;
#X connect 59 1 58 0;
#X connect 60 0 56 0;
#X connect 61 0 67 0;
#X connect 67 0 62 0;
#X connect 67 1 63 0;
#X connect 68 0 45 0;
#X connect 68 1 71 0;
#X connect 72 0 73 0;
#X connect 73 0 75 0;
#X connect 79 0 80 0;
#X connect 80 0 39 0;
#X restore 165 336 pd other functions;
#N canvas 321 89 892 328 if 0;
#X obj 82 81 expr if($f1 > 0 \, 1 \, -1);
#X floatatom 82 53 5 0 0 0 - - -, f 5;
#X floatatom 82 112 5 0 0 0 - - -, f 5;
#X text 53 21 if(condition \, true \, false);
#X text 50 81 if;
#X floatatom 87 218 5 0 0 0 - - -, f 5;
#X floatatom 87 277 5 0 0 0 - - -, f 5;
#X text 142 213 if(condition \, true \, false);
#X text 55 246 if;
#X obj 87 246 expr if($f1 > 0 \, $f1 * 10 \, $f1 - 1);
#X floatatom 496 166 5 0 0 0 - - -, f 5;
#X obj 496 135 expr random(10 \, 20);
#X obj 496 107 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 436 25 The random function generates random numbers within
a range \, specified by the two arguments. The range is from the first
argument to the second minus one., f 51;
#X text 522 102 random values from 10 to 19;
#X text 46 165 accepts expressions as true/false;
#X floatatom 497 266 5 0 0 0 - - -, f 5;
#X obj 497 207 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 497 235 expr random(-100 \, 101);
#X text 523 202 random values from -100 to 100;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 5 0 9 0;
#X connect 9 0 6 0;
#X connect 11 0 10 0;
#X connect 12 0 11 0;
#X connect 17 0 18 0;
#X connect 18 0 16 0;
#X restore 165 201 pd if & random functions;
#X text 42 26 Here is a list of all operators and functions available
in the expr family of objects.;
#X restore 659 427 pd all operators and functions;
#X obj 98 72 expr;
#X obj 149 72 expr~;
#X obj 208 72 fexpr~;
#X text 285 72 by Shahrokh Yadegari;
#X text 29 389 Used for expr~ only:;
#X text 31 443 Used for fexpr~ only:;
#X text 800 491 updated for Pd 0.48;
#X obj 703 115 expr $f1 + 1 \; $f1 - 1;
#X floatatom 703 91 5 0 0 0 - - -, f 5;
#X floatatom 703 159 5 0 0 0 - - -, f 5;
#X floatatom 804 159 5 0 0 0 - - -, f 5;
#X text 532 18 You can define multiple expressions in the same object
by using a semicolon to separates the expressions.;
#X text 27 282 General inputs/inlets are specified as follows where
the '#' stands for the inlet number:;
#X text 27 151 - expr: used for evaluation of control data expressions
;
#X text 27 178 - expr~: used for evaluation of audio signal expression
- done on the vector by vector basis (where the block/vector size is
defined by the "block~" object).;
#X text 80 501 (where n has to satisfy 0 => n >= -vector size);
#X text 27 18 Expression evaluation family of objects - whose syntax
is very similar to how expressions are written in C.;
#N canvas 327 126 1037 555 examples 0;
#X obj 77 112 expr 1;
#X floatatom 83 187 0 0 0 0 - - -;
#X floatatom 77 142 0 0 0 0 - - -;
#X msg 77 84 bang;
#X obj 145 110 expr 2 + 3;
#X msg 145 83 bang;
#X floatatom 145 138 0 0 0 0 - - -;
#X floatatom 83 245 0 0 0 0 - - -;
#X floatatom 83 301 0 0 0 0 - - -;
#X floatatom 83 376 0 0 0 0 - - -;
#X floatatom 192 301 0 0 0 0 - - -;
#X floatatom 85 444 0 0 0 0 - - -;
#X floatatom 85 500 0 0 0 0 - - -;
#X obj 85 472 expr sin(2 * 3.14159 * $f1 / 360);
#X text 49 27 Examples of expr object;
#X obj 83 217 expr 2 + $f1;
#X text 242 106 bang gevaluates the expression, f 17;
#X text 197 211 $f1 is the float input, f 12;
#X obj 83 339 expr $f1 * $i2;
#X text 212 332 float input (left inlet) multiplied integer input (right
inlet), f 24;
#X text 148 441 use of a trigonometric function;
#X floatatom 721 158 0 0 0 0 - - -;
#X obj 721 130 expr 8 / 3;
#X text 478 23 NOTE:;
#X text 506 54 Integer numbers in the expr object are interpreted as
integers \, not floats. hence \, the result of the division below is
also an integer.;
#X text 507 197 One possible workaround is to have a decimal point
\, in a way that Pd can't turn into an integer \, such as:;
#X floatatom 720 309 0 0 0 0 - - -;
#X obj 720 281 expr 8./3;
#X obj 721 104 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 720 254 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 613 497 0 0 0 0 - - -;
#X obj 613 469 expr $f1 / 3;
#X floatatom 740 495 0 0 0 0 - - -;
#X obj 740 467 expr $i1 / 3;
#X msg 677 426 8;
#X text 515 363 But there's no need to worry if the inlet is defined
as a float.;
#X obj 677 396 loadbang;
#X connect 0 0 2 0;
#X connect 1 0 15 0;
#X connect 3 0 0 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 8 0 18 0;
#X connect 10 0 18 1;
#X connect 11 0 13 0;
#X connect 13 0 12 0;
#X connect 15 0 7 0;
#X connect 18 0 9 0;
#X connect 22 0 21 0;
#X connect 27 0 26 0;
#X connect 28 0 22 0;
#X connect 29 0 27 0;
#X connect 31 0 30 0;
#X connect 33 0 32 0;
#X connect 34 0 31 0;
#X connect 34 0 33 0;
#X connect 36 0 34 0;
#X restore 744 231 pd examples of expr;
#N canvas 445 95 885 699 examples 0;
#X obj 94 307 print~;
#X msg 112 278 bang;
#X obj 94 211 sig~ 440;
#X floatatom 211 217 0 0 0 0 - - -;
#X floatatom 94 183 0 0 0 0 - - -;
#X floatatom 89 364 0 0 0 0 - - -;
#X text 230 247 vector times scalar;
#X obj 89 471 dac~;
#X text 134 364 frequency;
#X floatatom 783 145 0 0 10 0 - - -;
#X obj 546 214 tabsend~ a1;
#N canvas 0 50 450 300 (subpatch) 0;
#X array a1 64 float 0;
#X coords 0 1 63 -1 200 140 1;
#X restore 594 278 graph;
#X obj 97 634 tabsend~ a2;
#X obj 286 630 tabsend~ a3;
#N canvas 0 50 450 300 (subpatch) 0;
#X array a2 64 float 1;
#A 0 0.890968 0.864302 0.834145 0.800578 0.763745 0.723783 0.680837
0.635109 0.586746 0.535968 0.482966 0.427952 0.371159 0.312796 0.253116
0.19235 0.130755 0.0685777 0.0060712 -0.0565098 -0.118908 -0.180872
-0.242147 -0.302481 -0.361631 -0.419343 -0.475403 -0.52956 -0.581612
-0.631339 -0.678533 -0.723027 -0.764595 -0.803106 -0.838384 -0.870303
-0.89874 -0.923556 -0.944697 -0.962028 -0.97553 -0.985129 -0.990775
-0.992492 -0.990232 -0.984065 -0.973978 -0.960049 -0.942338 -0.920907
-0.895889 -0.867329 -0.835412 -0.800251 -0.762007 -0.720855 -0.676942
-0.630491 -0.581666 -0.530699 -0.47779 -0.42316 -0.367056 -0.30969
;
#X coords 0 1 63 -1 200 140 1;
#X restore 430 523 graph;
#N canvas 0 50 450 300 (subpatch) 0;
#X array a3 64 float 0;
#X coords 0 1 63 -1 200 140 1;
#X restore 652 523 graph;
#X obj 94 247 expr~ $v1 * $f2;
#X text 31 120 NOTE: The first inlet of expr~ needs to be $v1 (cannot
be "$f1" or "$i1") and only accepts signals., f 54;
#X obj 89 391 osc~ 440;
#X obj 321 335 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X floatatom 318 355 5 0 0 0 - - -, f 5;
#X text 369 354 amplitude;
#X obj 318 402 line~;
#X msg 318 378 \$1 10;
#X obj 89 432 expr~ $v1 * pow($v2 / 127 \, 4);
#X obj 97 584 expr~ $v1 * $v2 \; if ($v2 > 0 \, 0 \, $v1*$v2);
#X obj 97 551 osc~ 440;
#X obj 286 551 osc~ 50;
#X obj 546 137 osc~ 440;
#X msg 363 55 \; pd dsp 0;
#X msg 270 55 \; pd dsp 1;
#X text 268 33 audio on;
#X text 361 32 audio off;
#X text 73 40 make sure to turn on the audio for the expr~ examples
, f 21;
#X obj 546 175 expr~ max(min($v1 \, $f2) \, -$f2);
#X text 523 51 A simple limiter example:;
#X obj 783 30 vsl 20 100 0 1 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X text 525 75 Move the slider to change the limiter threshold (from
0-1)., f 29;
#X connect 1 0 0 0;
#X connect 2 0 16 0;
#X connect 3 0 16 1;
#X connect 4 0 2 0;
#X connect 5 0 18 0;
#X connect 9 0 34 1;
#X connect 16 0 0 0;
#X connect 18 0 24 0;
#X connect 19 0 20 0;
#X connect 20 0 23 0;
#X connect 22 0 24 1;
#X connect 23 0 22 0;
#X connect 24 0 7 0;
#X connect 24 0 7 1;
#X connect 25 0 12 0;
#X connect 25 1 13 0;
#X connect 26 0 25 0;
#X connect 27 0 25 1;
#X connect 28 0 34 0;
#X connect 34 0 10 0;
#X connect 36 0 9 0;
#X restore 736 265 pd examples of expr~;
#N canvas 238 51 1070 715 examples 0;
#X msg 371 46 \; pd dsp 0;
#X msg 278 46 \; pd dsp 1;
#X text 276 24 audio on;
#X text 369 23 audio off;
#X text 17 184 fexpr~ has special input and output variables:, f 62
;
#X text 48 245 (where n has to satisfy 0 => n >= -vector size);
#X text 16 343 Shorthands:;
#X text 33 381 - $x1: same as $x1[0] \, $x2: same as $x2[0] (and so
on)., f 60;
#X text 33 362 - $x: same as $x1[0]., f 60;
#X text 33 400 - $y: same as $y1[-1]., f 60;
#X text 33 420 - $y1: same as $y1[-1] \, $y2: same as $y2[-1] (and
so on)., f 60;
#X msg 114 539 start;
#X msg 62 539 stop;
#X obj 62 509 loadbang;
#X msg 183 536 set 4000;
#X obj 170 502 sig~ 0.001;
#X obj 170 604 fexpr~ $x1[0] + $y1[-1];
#X msg 197 570 clear y1;
#X text 274 571 clears output buffer;
#X obj 170 642 snapshot~;
#X obj 34 594 metro 100;
#X obj 34 572 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X floatatom 170 674 0 0 0 0 - - -;
#X text 258 501 increment value;
#X text 256 535 set last output value ($y1[-1]);
#X text 16 467 Simple accumulator:;
#X text 541 14 fexpr~ responds to the following methods:, f 63;
#X text 565 73 - clear: clears all the previous input and output buffers
, f 60;
#X text 565 34 - clear x#: clears the previous values of the #th input
, f 60;
#X text 565 53 - clear y#: clears the previous values of the #th output
, f 60;
#X text 565 247 - set y# <list>: sets the as many supplied values of
the #th output (e.g. "set y3 1 2" sets $y3[-1] = 1 and $y3[-2] = 2).
;
#X floatatom 857 550 0 0 0 0 - - -;
#X msg 637 516 start;
#X msg 591 516 stop;
#X obj 591 483 loadbang;
#X obj 692 547 osc~ 2205;
#X msg 818 512 0;
#X obj 663 671 dac~;
#X obj 692 630 *~ 0.1;
#X obj 692 586 fexpr~ $x1 + $x1[$f2];
#X msg 709 485 22050;
#X msg 692 458 1102.5;
#X floatatom 692 516 0 0 0 0 - - -;
#X text 541 383 Simple FIR filter:, f 63;
#X msg 897 512 -20;
#X msg 857 512 -10;
#X text 795 466 change values to filter the frequencies, f 23;
#N canvas 445 103 898 595 Lorenz 0;
#X obj 163 195 v pr;
#X obj 314 195 v r;
#X obj 218 197 v b;
#X floatatom 163 166 5 0 0 0 - - -, f 5;
#X floatatom 314 167 5 0 0 0 - - -, f 5;
#X msg 163 141 10;
#X msg 141 253 set 1.2 2.3 4.4;
#X floatatom 218 167 7 0 0 0 - - -, f 7;
#X msg 67 220 stop;
#X msg 14 220 start;
#X floatatom 382 168 5 0 0 0 - - -, f 5;
#X obj 382 197 v dt;
#X msg 314 139 18;
#X msg 382 129 0.01;
#X obj 63 402 dac~;
#X obj 141 67 bng 25 250 50 0 empty empty empty 20 8 0 8 -262144 -1
-1;
#X obj 432 138 line;
#X msg 432 112 0.01 \, 0.04 5000;
#X obj 67 195 loadbang;
#N canvas 0 50 450 300 (subpatch) 0;
#X array lorenz1 64 float 0;
#X coords 0 20 63 -20 200 140 1 0 0;
#X restore 168 427 graph;
#N canvas 0 50 450 300 (subpatch) 0;
#X array lorenz2 64 float 0;
#X coords 0 20 63 -20 200 140 2 0 0;
#X restore 415 425 graph;
#N canvas 0 50 450 300 (subpatch) 0;
#X array lorenz3 64 float 0;
#X coords 0 40 63 0 200 140 2 0 0;
#X restore 660 424 graph;
#X obj 141 287 fexpr~ $y1 + (pr*$y2 - pr*$y1) * dt \; $y2 + (-$y1 *
$y3 + r*$y1-$y2) * dt \; $y3 + ($y1*$y2 - b*$y3) * dt;
#X obj 218 138 expr 8./3;
#X text 446 304 Note the shorthands:;
#X text 616 292 $y1 -> $y1[-1] $y2 -> $y2[-1] $y3 -> $y3[-1], f 15
;
#X obj 283 361 tabsend~ lorenz2;
#X obj 426 362 tabsend~ lorenz3;
#X obj 141 361 tabsend~ lorenz1;
#X text 195 27 This is an example of how fexpr~ can be used to solve
differential equations \, in this case the lorenz equations (which
generate chotic signals)., f 49;
#X text 273 252 sets initial values of $y1[-1] \, $y2[-1] \, and $y3[-1]
;
#X obj 63 361 *~ 0.01;
#X text 135 551 -20;
#X text 142 420 20;
#X text 378 551 -20;
#X text 385 420 20;
#X text 640 551 0;
#X text 635 420 40;
#X text 701 109 dZ/dt = -bZ, f 20;
#X text 701 69 dX/dt = pr * (X - Y);
#X text 701 89 dY/dt = -XZ + rX - y;
#X text 631 26 Lorenz Equations written with 3 state variables X \,
Y \, and Z:, f 30;
#X text 77 31 Turn audio on and bang here =>, f 11;
#X text 456 185 If you hear a click and audio stops \, you've gone
unstable and need to bang on the top again to reload default values.
, f 43;
#X text 433 167 <= experiment with these parameter values;
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 3 0;
#X connect 6 0 22 0;
#X connect 7 0 2 0;
#X connect 8 0 22 0;
#X connect 9 0 22 0;
#X connect 10 0 11 0;
#X connect 12 0 4 0;
#X connect 13 0 10 0;
#X connect 15 0 5 0;
#X connect 15 0 12 0;
#X connect 15 0 13 0;
#X connect 15 0 6 0;
#X connect 15 0 9 0;
#X connect 15 0 23 0;
#X connect 16 0 10 0;
#X connect 17 0 16 0;
#X connect 18 0 8 0;
#X connect 22 0 28 0;
#X connect 22 0 31 0;
#X connect 22 1 26 0;
#X connect 22 2 27 0;
#X connect 23 0 7 0;
#X connect 31 0 14 0;
#X connect 31 0 14 1;
#X restore 802 670 pd Lorenz difference equation;
#X text 615 405 -10 offset fully filters the frequency of 2205 -20
offset filters audio at frequency of 1102.5, f 47;
#N canvas 755 185 539 371 FIR 0;
#X msg 132 175 start;
#X msg 80 174 stop;
#X obj 80 143 loadbang;
#X obj 152 325 dac~;
#X obj 163 284 *~ 0.1;
#X obj 331 132 hsl 128 15 0 -10 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X floatatom 328 158 0 -10 0 0 - - -;
#X obj 328 218 line~;
#X msg 328 188 \$1 100;
#X obj 163 249 fexpr~ $x1 + $x1[$X2];
#X obj 163 207 osc~ 2205;
#X text 25 21 When fractional index offset is used \, fexpr~ determines
the value by linear interpolation. In the following example \, you
can continuously change the index from 0 to -10 (which filters the
frequency of 2205).;
#X text 223 112 fractional sample index offset, f 17;
#X connect 0 0 9 0;
#X connect 1 0 9 0;
#X connect 2 0 1 0;
#X connect 4 0 3 0;
#X connect 4 0 3 1;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 7 0 9 1;
#X connect 8 0 7 0;
#X connect 9 0 4 0;
#X connect 10 0 9 0;
#X restore 826 642 pd FIR (fractional offset);
#X text 565 291 - set <list>: sets the first past values of each output
(e.g. "set 0.1 2.2 0.4" sets y1[-1] = 0.1 \, y2[-1] = 2.2 \, and y3[-1]
= 0.4).;
#X text 565 92 - stop: stops the computation of fexpr~ *, f 60;
#X text 613 140 * fexpr~ can be CPU expensive \, by default fexpr~
is on when it is loaded \, but you can turn it on and off with the
start and stop messages to save CPU consumption., f 54;
#X text 565 112 - start: starts the computation of fexpr~ *, f 60
;
#X text 565 202 - set x# <list>: sets as many supplied values of the
#th input (e.g. "set x2 1 2" sets $x2[0] = 1 and $x2[-1] = 2)., f
60;
#X text 16 101 NOTES:;
#X text 33 120 - fexpr~ does not understand '$v#' variables., f 60
;
#X text 33 140 - The first inlet of expr~ only accepts signals and
needs to be '$x1' (cannot be "$f1" or "$i1").;
#X text 33 226 - $y#[n]: the sample output value of outlet # indexed
by 'n';
#X text 33 207 - $x#[n]: sample from inlet # indexed by 'n', f 60
;
#X text 16 277 In this way \, $x#[0] specifies the current sample input
\, and $y#[-1] the last sample output (which is the minimum 'n' value
\, for feedback)., f 62;
#X text 108 37 make sure to turn on the audio for the fexpr~ examples
, f 19;
#X connect 11 0 16 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 13 0 21 0;
#X connect 14 0 16 0;
#X connect 15 0 16 0;
#X connect 16 0 19 0;
#X connect 17 0 16 0;
#X connect 19 0 22 0;
#X connect 20 0 19 0;
#X connect 21 0 20 0;
#X connect 31 0 39 1;
#X connect 32 0 39 0;
#X connect 33 0 39 0;
#X connect 34 0 33 0;
#X connect 35 0 39 0;
#X connect 36 0 31 0;
#X connect 38 0 37 0;
#X connect 38 0 37 1;
#X connect 39 0 38 0;
#X connect 40 0 42 0;
#X connect 41 0 42 0;
#X connect 42 0 35 0;
#X connect 44 0 31 0;
#X connect 45 0 31 0;
#X restore 728 298 pd examples of fexpr~;
#X text 27 234 - fexpr~ (very cpu intensive): used for evaluation of
signal expressions on sample level data (i.e. \, filter design).;
#X text 60 325 - $i#: integer input variable;
#X text 59 341 - $f#: float input variable;
#X text 60 358 - $s#: symbol input variable (to define array names)
;
#X text 61 410 - $v#: signal (vector) input;
#X text 63 463 - $x#[n]: sample from inlet # indexed by 'n';
#X text 63 482 - $y#[n]: the sample output value of outlet # indexed
by 'n';
#X text 29 115 Online documentation: http://yadegari.org/expr/expr.html
;
#X connect 11 0 13 0;
#X connect 11 1 14 0;
#X connect 12 0 11 0;
